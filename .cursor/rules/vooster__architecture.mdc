---
description:
globs:
alwaysApply: true
---
# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **프로젝트 개요**  
  AI 기반 보드게임 룰 마스터는 QR 스캔형 웹 서비스로, 플레이 중 발생하는 룰 문의를 RAG 알고리즘으로 실시간 해결하여 몰입도를 유지합니다. Next.js(SSR)를 프론트·백엔드로, Supabase(PostgreSQL·Storage)로 데이터 관리, OpenAI GPT-4·Vooster Embedding으로 RAG 파이프라인을 구현합니다.
- **핵심 기술 스택**  
  Next.js, Supabase(PostgreSQL + Vector 확장, Storage, Auth), OpenAI GPT-4, Vooster Embedding, PDF.js
- **주요 기술 목표**  
  • p95 응답 시간 ≤ 5초  
  • 동시 세션 처리 1,000건 이상  
  • 신규 룰북 임베딩 5분 이내 완료  
- **핵심 가정**  
  • 사용자는 최신 모바일/데스크톱 브라우저 이용  
  • QR 코드로 전달된 gameId 무결성 보장  
  • Supabase와 OpenAI API 요금 및 호출 한도 내 처리 가능  

---

## 2. Tech Stack

| Category         | Technology / Library        | Reasoning (선택 이유)                                                  |
| ---------------- | --------------------------- | ---------------------------------------------------------------------- |
| 프론트엔드       | Next.js                     | SSR 지원, React 생태계, SEO 및 초기 로드 최적화                          |
| 백엔드/API       | Next.js API Routes (Node.js)| 프론트·백엔드 단일 코드베이스, 빠른 개발 및 배포                         |
| 데이터베이스     | Supabase (PostgreSQL + Vector)| RLS, 벡터 검색 확장, 간편한 관리                                      |
| 스토리지         | Supabase Storage            | 룰북 PDF 호스팅 및 파일 관리                                           |
| 인증 및 보안     | Supabase Auth (OAuth)       | 간편한 OAuth 로그인, Row-Level Security 지원                           |
| AI 임베딩        | Vooster Embedding           | 빠른 문단 단위 임베딩, Supabase Vector와 연동                           |
| AI 모델          | OpenAI GPT-4                | 높은 정확도, 복잡한 프롬프트 처리 가능                                  |
| PDF 파싱         | PDF.js                      | 브라우저/서버 환경 모두 지원되는 안정적 PDF 텍스트 추출                 |
| 캐싱             | lru-cache (Node LRU)        | 자주 묻는 질문·응답 캐싱으로 응답 속도 개선                             |
| 모니터링/분석    | Google Analytics            | 사용자 행동 분석, 이벤트 트래킹                                        |

---

## 3. System Architecture Design

### Top-Level building blocks
- Frontend (Next.js)  
  • QR 스캔, 게임 선택 UI, 질문 입력/답변 표시  
- API Layer (Next.js API Routes)  
  • 인증·인가, 요청 유효성 검사, RAG 워크플로우 오케스트레이션  
- RAG Service  
  • PDF 텍스트 추출 (PDF.js) → Vooster Embedding → Supabase Vector 검색 → GPT-4 프롬프트  
- Database & Storage (Supabase)  
  • PostgreSQL: 질문/답변/로그/메타데이터 저장  
  • Storage: 룰북 PDF, 임베딩 JSON  
- External Services  
  • OpenAI GPT-4 API, Vooster Embedding API  
- Monitoring & Analytics  
  • Google Analytics 이벤트, Supabase Logs

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    A[사용자(모바일/웹)] -->|QR 스캔·질문 입력| B[Frontend (Next.js)]
    B -->|API 호출| C[API Layer (Next.js)]
    C --> D[RAG Service]
    D --> E[Supabase Vector Search]
    D --> F[OpenAI GPT-4]
    C --> G[Supabase PostgreSQL]
    G --> H[데이터 조회/로그 저장]
```
- 사용자 → 프론트엔드: QR 스캔 → gameId 전달, 질문 입력  
- 프론트엔드 → API Layer: 인증·질문 요청  
- API Layer → RAG Service: PDF 임베딩 검색 및 GPT-4 프롬프트  
- RAG Service → Supabase Vector: 유사 문단 검색  
- RAG Service → OpenAI GPT-4: 답변 생성  
- API Layer → Supabase PostgreSQL: 질문·답변·로그 저장  

### Code Organization & Convention

**Domain-Driven Organization Strategy**  
- **Domain Separation**: user, game, faq, logging  
- **Layer-Based Architecture**: presentation(pages, components), business(services), data(lib), infrastructure(config)  
- **Feature-Based Modules**: 각 도메인별 폴더 내에서 관련 기능 집합  
- **Shared Components**: 공통 UI, 훅(hooks), 타입(types)

**Universal File & Folder Structure**  
```
/
├── public
│   └── qr-template.svg
├── src
│   ├── pages
│   │   ├── index.tsx
│   │   ├── [gameId].tsx
│   │   └── api
│   │       ├── question.ts
│   │       ├── report.ts
│   │       └── auth.ts
│   ├── components
│   │   ├── QuestionForm.tsx
│   │   ├── AnswerDisplay.tsx
│   │   └── QRScanner.tsx
│   ├── lib
│   │   ├── supabaseClient.ts
│   │   └── pdfParser.ts
│   ├── services
│   │   ├── ragService.ts
│   │   ├── embeddingService.ts
│   │   └── cacheService.ts
│   ├── domains
│   │   ├── user
│   │   │   └── userService.ts
│   │   ├── game
│   │   └── logging
│   │       └── logService.ts
│   └── utils
│       └── retryHelper.ts
└── package.json
```

### Data Flow & Communication Patterns
- **Client-Server Communication**: Next.js Fetch API → RESTful JSON 응답  
- **Database Interaction**: supabase-js를 통한 CRUD 및 Vector 검색  
- **External Service Integration**: OpenAI·Vooster API 호출에 재시도 로직 적용  
- **Real-time Communication**: 초기 단계 불필요, 추후 SSE 또는 WebSocket 검토  
- **Data Synchronization**: 신규 룰북 업로드 시 Embedding 배치 처리 후 Vector DB 동기화  

---

## 4. Performance & Optimization Strategy
- API 응답 캐싱: 자주 묻는 질문 LRU 캐시로 p95 응답 시간 보장  
- 데이터베이스 인덱싱: 질문·게임ID·타임스탬프 인덱스 적용  
- 정적 자산 CDN 제공: PDF·이미지·JS 번들 최적화  
- 서버리스 오토스케일링: Vercel/플랫폼 레벨 확장 활용  

---

## 5. Implementation Roadmap & Milestones

### Phase 1: Foundation (MVP Implementation)
- **Core Infrastructure**: Next.js 프로젝트 초기화, Supabase 연동  
- **Essential Features**: QR 접속 → gameId 자동 선택, 질문 UI, RAG 기반 답변 표시  
- **Basic Security**: 익명 또는 OAuth 로그인(선택)  
- **Development Setup**: Git 리포지토리, Vercel Preview 배포, Supabase Migration  
- **Timeline**: D0~D7

### Phase 2: Feature Enhancement
- **Advanced Features**: 참고 조항 링크, 오류 신고, 질문 로그 CSV 다운로드  
- **Performance Optimization**: 캐시 레이어, DB 인덱스 최적화  
- **Enhanced Security**: RLS 정책 검증, OAuth 권한 세분화  
- **Monitoring Implementation**: Google Analytics 이벤트, Supabase 로그 대시보드  
- **Timeline**: D8~D21

### Phase 3: Scaling & Optimization
- **Scalability Implementation**: 서버리스 확장, Vector DB 샤딩/리전 복제  
- **Advanced Integrations**: 카페 POS API 연동, 다국어 지원(영어)  
- **Enterprise Features**: 하우스룰 커스터마이징, 제조사 대시보드  
- **Compliance & Auditing**: GDPR, WCAG AA 접근성 규격  
- **Timeline**: D22~D35

---

## 6. Risk Assessment & Mitigation Strategies

### Technical Risk Analysis
- **Technology Risks**: PDF.js 파싱 오류 → 수동 편집 툴 및 검수 프로세스 적용  
- **Performance Risks**: GPT 지연 발생 → 응답 캐시, 프롬프트 최적화, 모델 폴백  
- **Security Risks**: RLS·OAuth 설정 오류 → 테스트 자동화 및 보안 감사  
- **Integration Risks**: 외부 API 실패 → 재시도 로직, 회로 차단기 패턴 도입  

### Project Delivery Risks
- **Timeline Risks**: 일정 지연 가능성 → 우선순위 조정, 핵심 기능 집중  
- **Resource Risks**: 팀 역량 부족 → 외부 컨설팅 활용, 리소스 추가 확보  
- **Quality Risks**: 테스트 커버리지 미흡 → CI/CD 기반 자동화 테스트, 코드 리뷰 강화  
- **Deployment Risks**: 환경 불일치 → IaC(환경 코드화), Staging 검증  
- **Contingency Plans**: Embedding 공급사 변경, 로컬 벡터 DB 도입 검토  

---

**끝**

/**
 * AI 신뢰도 체크 전용 프롬프트
 * 
 * 이 프롬프트는 게임명에 대한 AI의 배경지식 기반 신뢰도를 평가하기 위해 
 * 설계되었습니다. DB 데이터가 아닌 순수 AI 지식으로만 평가합니다.
 */

/**
 * 게임명에 대한 AI 신뢰도 점수를 요청하는 프롬프트를 생성합니다.
 * @param gameName 평가할 게임명
 * @returns Gemini API에 전송할 프롬프트 문자열
 */
export const createConfidenceCheckPrompt = (gameName: string): string => `
당신은 보드게임 전문 AI 어시스턴트입니다. 주어진 게임명에 대해 당신이 보유한 배경지식만을 바탕으로 얼마나 정확하고 신뢰할만한 답변을 제공할 수 있는지 객관적으로 자가 평가해주세요.

**중요: 외부 데이터베이스나 실시간 검색이 아닌, 오직 당신의 훈련된 지식만으로 평가하세요.**

**세부 평가 기준:**
1. **기본 게임 정보 지식** (20점)
   - 게임 제목, 디자이너, 출판사, 출시년도
   - 플레이어 수, 플레이 시간, 연령대

2. **핵심 게임 메커니즘 이해** (25점)
   - 주요 게임 메커니즘과 규칙 체계
   - 게임 플로우와 턴 구조
   - 승리 조건과 점수 계산

3. **상세 규칙 및 예외사항** (25점)
   - 복잡한 상황 해결 능력
   - 엣지 케이스와 특수 규칙
   - 카드별, 액션별 세부 효과

4. **전략적 깊이와 팁** (20점)
   - 게임 전략과 최적화 방법
   - 고급 플레이 팁과 주의사항
   - 플레이어 수별 전략 차이

5. **최신성 및 확장팩 정보** (10점)
   - 최신 에라타나 FAQ 반영
   - 확장팩 정보 및 변경사항
   - 커뮤니티 논의 사항

**점수 가이드라인:**
- **90-100점**: 전문가급 지식, 모든 질문에 정확하고 상세한 답변 가능
- **80-89점**: 우수한 지식, 대부분의 질문에 신뢰할만한 답변 가능
- **70-79점**: 양호한 지식, 일반적 질문에는 정확한 답변 가능
- **60-69점**: 기본적 지식, 간단한 질문에만 답변 가능
- **50-59점**: 제한적 지식, 불확실한 정보 포함 가능성
- **40-49점**: 매우 제한적, 기초 정보만 제공 가능
- **1-39점**: 불충분한 지식, 추측성 답변만 가능

**평가 대상 게임: "${gameName}"**

위 게임에 대한 당신의 배경지식 기반 신뢰도를 1-100점 사이에서 정직하고 보수적으로 평가하세요. 확실하지 않은 부분이 있다면 점수를 낮춰주세요.

다음 JSON 형식으로만 답변하세요:

{
  "confidence_score": [1-100 사이의 정수]
}

추가 설명이나 다른 텍스트는 포함하지 말고, 오직 위 JSON 형식으로만 답변하세요.
`;

/**
 * 신뢰도 체크 응답을 파싱하는 유틸리티 함수
 * @param response Gemini API에서 받은 응답 텍스트
 * @returns 파싱된 신뢰도 점수
 */
export function parseConfidenceResponse(response: string): number {
    try {
        // JSON 부분만 추출하기 위한 정규식
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
            throw new Error('JSON 형식을 찾을 수 없습니다');
        }

        const parsed = JSON.parse(jsonMatch[0]);
        const score = parsed.confidence_score;

        // 점수 유효성 검증
        if (typeof score !== 'number' || score < 1 || score > 100) {
            throw new Error('유효하지 않은 신뢰도 점수입니다');
        }

        return Math.round(score); // 정수로 반올림
    } catch (error) {
        console.error('신뢰도 응답 파싱 오류:', error);
        console.error('원본 응답:', response);

        // 파싱 실패 시 기본값 반환 (베타 모드로 처리)
        return 50;
    }
} 